# -*- coding: utf-8 -*-
# Generated by Django 1.11.23 on 2022-12-06 15:32
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0007_center'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('child', '0001_initial'),
        ('schools', '0133_auto_20221206_1532'),
        ('outreach', '0034_auto_20221206_1532'),
    ]

    operations = [
        migrations.CreateModel(
            name='DigitalService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('using_akelius', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Is the child using Akelius?')),
                ('using_lp', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Is the child using Learning Passport?')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Digital',
                'verbose_name_plural': 'Digital',
            },
        ),
        migrations.CreateModel(
            name='EducationAssessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('pre_attended_arabic', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the Child Undertake Arabic Language Development Assessment')),
                ('pre_modality_arabic', models.CharField(blank=True, choices=[('Online Forms', 'Online Forms'), ('Phone call/WhatsApp', 'Phone call/WhatsApp'), ('Asking Parents', 'Asking Parents'), ('Offline (F2F)', 'Offline (F2F)')], max_length=50, null=True, verbose_name='Modality')),
                ('pre_arabic_grade', models.IntegerField(blank=True, null=True, verbose_name='Grade')),
                ('pre_attended_language', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the Child Undertake Foreign Language Development Assessment')),
                ('pre_modality_language', models.CharField(blank=True, choices=[('Online Forms', 'Online Forms'), ('Phone call/WhatsApp', 'Phone call/WhatsApp'), ('Asking Parents', 'Asking Parents'), ('Offline (F2F)', 'Offline (F2F)')], max_length=50, null=True, verbose_name='Modality')),
                ('pre_language_grade', models.IntegerField(blank=True, null=True, verbose_name='Grade')),
                ('pre_attended_math', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the Child Undertake Cognitive Development - Mathematics test')),
                ('pre_modality_math', models.CharField(blank=True, choices=[('Online Forms', 'Online Forms'), ('Phone call/WhatsApp', 'Phone call/WhatsApp'), ('Asking Parents', 'Asking Parents'), ('Offline (F2F)', 'Offline (F2F)')], max_length=50, null=True, verbose_name='Modality')),
                ('pre_math_grade', models.IntegerField(blank=True, null=True, verbose_name='Grade')),
                ('participation', models.CharField(blank=True, choices=[('', '----------'), ('No Absence', 'No Absence'), ('Absence for less than 5 days/equivlant remote learning sessions', 'Absence for less than 5 days/equivlant remote learning sessions'), ('Absence for 5-10 days /equivlant remote learning sessions', 'Absence for 5-10 days /equivlant remote learning sessions'), ('Absence for 10-15 days /equivlant remote learning sessions', 'Absence for 10-15 days /equivlant remote learning sessions'), ('Absence for 15-25 days /equivlant remote learning sessions', 'Absence for 15-25 days /equivlant remote learning sessions'), ('Absence for more than 25 days / equivlant remote learning sessions', 'Absence for more than 25 days / equivlant remote learning sessions')], max_length=100, null=True, verbose_name='Child Level of participation / Absence')),
                ('barriers_single', models.CharField(blank=True, choices=[('', '----------'), ('Working Full-time to support family', 'Working Full-time to support family'), ('Availability of Electronic Device', 'Availability of Electronic Device'), ('Sickness', 'Sickness'), ('Family changed address in Lebanon', 'Family changed address in Lebanon'), ('Marriage/engagement', 'Marriage/engagement'), ('No barriers', 'No barriers'), ('Enrolled in Formal Education', 'Enrolled in Formal Education'), ('Seasonal Work', 'Seasonal Work'), ('Internet Connectivity', 'Internet Connectivity'), ('Security Concerns', 'Security Concerns'), ('Family moved back to Syria', 'Family moved back to Syria'), ('No Interest in pursuing programme', 'No Interest in pursuing programme'), ('Violence and Bullying', 'Violence and Bullying'), ('Other', 'Other')], max_length=100, null=True, verbose_name="The main barriers affecting the child's daily attendance/participation, performance, or causing drop-out")),
                ('barriers_other', models.TextField(blank=True, null=True, verbose_name='Please specify')),
                ('post_test_done', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the child undertake the Post tests?')),
                ('school_year_completed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the child fully complete the school year?')),
                ('post_attended_arabic', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the Child Undertake Arabic Language Development Assessment')),
                ('post_modality_arabic', models.CharField(blank=True, choices=[('Online Forms', 'Online Forms'), ('Phone call/WhatsApp', 'Phone call/WhatsApp'), ('Asking Parents', 'Asking Parents'), ('Offline (F2F)', 'Offline (F2F)')], max_length=50, null=True, verbose_name='Modality')),
                ('post_arabic_grade', models.IntegerField(blank=True, null=True, verbose_name='Grade')),
                ('post_attended_language', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the Child Undertake Foreign Language Development Assessment')),
                ('post_modality_language', models.CharField(blank=True, choices=[('Online Forms', 'Online Forms'), ('Phone call/WhatsApp', 'Phone call/WhatsApp'), ('Asking Parents', 'Asking Parents'), ('Offline (F2F)', 'Offline (F2F)')], max_length=50, null=True, verbose_name='Modality')),
                ('post_language_grade', models.IntegerField(blank=True, null=True, verbose_name='Grade')),
                ('post_attended_math', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Did the Child Undertake Cognitive Development - Mathematics test')),
                ('post_modality_math', models.CharField(blank=True, choices=[('Online Forms', 'Online Forms'), ('Phone call/WhatsApp', 'Phone call/WhatsApp'), ('Asking Parents', 'Asking Parents'), ('Offline (F2F)', 'Offline (F2F)')], max_length=50, null=True, verbose_name='Modality')),
                ('post_math_grade', models.IntegerField(blank=True, null=True, verbose_name='Grade')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Education Assessment',
                'verbose_name_plural': 'Education Assessments',
            },
        ),
        migrations.CreateModel(
            name='EducationProgrammeAssessment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('pre_test', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('post_test', django.contrib.postgres.fields.jsonb.JSONField(blank=True, null=True)),
                ('programme_type', models.CharField(blank=True, choices=[('BLN Level 1', 'BLN Level 1'), ('BLN Level 2', 'BLN Level 2'), ('YBLN', 'YBLN'), ('YFNL', 'YFNL'), ('CBECE Level 3', 'CBECE Level 3'), ('Retention Support', 'Retention Support')], max_length=100, null=True, verbose_name='Education Programme Type')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Education Programme Assessment',
                'verbose_name_plural': 'Education Programme Assessments',
            },
        ),
        migrations.CreateModel(
            name='EducationRSService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('foreign_language_grade', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name="Foreign Language's grade")),
                ('arabic_grade', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name='Arabic grade')),
                ('math_grade', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name='Math grade')),
                ('sciences_grade', models.IntegerField(blank=True, choices=[(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19), (20, 20), (21, 21), (22, 22), (23, 23), (24, 24), (25, 25), (26, 26), (27, 27), (28, 28), (29, 29), (30, 30), (31, 31), (32, 32), (33, 33), (34, 34), (35, 35), (36, 36), (37, 37), (38, 38), (39, 39), (40, 40), (41, 41), (42, 42), (43, 43), (44, 44), (45, 45), (46, 46), (47, 47), (48, 48), (49, 49), (50, 50), (51, 51), (52, 52), (53, 53), (54, 54), (55, 55), (56, 56), (57, 57), (58, 58), (59, 59), (60, 60), (61, 61), (62, 62), (63, 63), (64, 64), (65, 65), (66, 66), (67, 67), (68, 68), (69, 69), (70, 70), (71, 71), (72, 72), (73, 73), (74, 74), (75, 75), (76, 76), (77, 77), (78, 78), (79, 79), (80, 80), (81, 81), (82, 82), (83, 83), (84, 84), (85, 85), (86, 86), (87, 87), (88, 88), (89, 89), (90, 90), (91, 91), (92, 92), (93, 93), (94, 94), (95, 95), (96, 96), (97, 97), (98, 98), (99, 99)], null=True, verbose_name='Sciences grade')),
                ('shift', models.CharField(blank=True, choices=[('', '----------'), ('First shift', 'First shift'), ('Second shift', 'Second shift')], max_length=50, null=True, verbose_name='First or Second shift schools')),
                ('grade_level', models.CharField(blank=True, choices=[('', '----------'), ('Level one', 'Level one'), ('Level two', 'Level two'), ('Level three', 'Level three'), ('Level four', 'Level four'), ('Level five', 'Level five'), ('Level six', 'Level six')], max_length=100, null=True, verbose_name='Grade level')),
                ('support_needed', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('', '----------'), ('Foreign Languages', 'Foreign Languages'), ('Arabic', 'Arabic'), ('Math', 'Math'), ('Sciences', 'Sciences')], max_length=100, null=True), blank=True, null=True, size=None, verbose_name='Needed support')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Education RS Service',
                'verbose_name_plural': 'Education RS Services',
            },
        ),
        migrations.CreateModel(
            name='EducationService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('education_status', models.CharField(blank=True, choices=[('', '----------'), ('Never registered in any formal school before', 'Never registered in any formal school before'), ("Was registered in formal school but didn't continue", "Was registered in formal school but didn't continue"), ('Was registered in non formal program and was referred to MSCC', 'Was registered in non formal program and was referred to MSCC'), ("Was registered in non formal program but didn't continue", "Was registered in non formal program but didn't continue"), ('Was enrolled in TVET Programs', 'Was enrolled in TVET Programse'), ('No', 'No')], max_length=200, null=True, verbose_name="Child's educational level when registering for the round")),
                ('dropout_date', models.DateField(blank=True, null=True, verbose_name='Please Specify dropout date from school')),
                ('dropout_program', models.CharField(blank=True, choices=[('', '----------'), ('Was registered in CBECE level 1-2', 'Was registered in CBECE level 1-2'), ('Was registered in BLN program', 'Was registered in BLN program'), ("Was registered in ALP program and didn't continue", "Was registered in ALP program and didn't continue"), ('Was enrolled in Dirasa', 'Was enrolled in Dirasa'), ('Other', 'Other')], max_length=200, null=True, verbose_name='Dropout Program')),
                ('dropout_program_specify', models.TextField(blank=True, null=True, verbose_name='please specify')),
                ('education_program', models.CharField(blank=True, choices=[('', '----------'), ('BLN Level 1', 'BLN Level 1'), ('BLN Level 2', 'BLN Level 2'), ('YBLN', 'YBLN'), ('YFNL', 'YFNL'), ('CBECE Level 3', 'CBECE Level 3'), ('Retention Support', 'Retention Support')], max_length=200, null=True, verbose_name='Education Program')),
                ('registration_date', models.DateField(blank=True, null=True, verbose_name='Date of registration in the round')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Education Service',
                'verbose_name_plural': 'Education Services',
            },
        ),
        migrations.CreateModel(
            name='FollowUpService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('follow_up_type', models.CharField(blank=True, choices=[('', '----------'), ('Phone call', 'Phone call'), ('Home Visits', 'Home Visits'), ('Caregiver visited the center', 'Caregiver visited the center')], max_length=100, null=True, verbose_name='In case of absence, type of Follow-up done')),
                ('phone_call_number', models.IntegerField(blank=True, null=True, verbose_name='Number of phone calls done')),
                ('house_visit_number', models.IntegerField(blank=True, null=True, verbose_name='Number of home visits done')),
                ('caregiver_visit_number', models.IntegerField(blank=True, null=True, verbose_name='Number of caregiver visits to center')),
                ('follow_up_result', models.CharField(blank=True, choices=[('Child returned to program', 'Child returned to program'), ('Child referred to specialized services', 'Child referred to specialized services'), ('Child referred to CP', 'Child referred to CP'), ('Child referred to Health programme', 'Child referred to Health programme'), ('Follow-up with parents', 'Follow-up with parents'), ('Dropout/No Interest', 'Dropout/No Interest')], max_length=100, null=True, verbose_name='Result of follow up')),
                ('dropout_reason', models.TextField(blank=True, null=True, verbose_name='Reason for dropout')),
                ('dropout_date', models.DateField(blank=True, null=True, verbose_name='Dropout Date')),
                ('parent_attended_meeting', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name="Did the child's caregiver attend parent meeting/engagment sessions")),
                ('meeting_type', models.CharField(blank=True, choices=[('PSS Session', 'PSS Session'), ('COVID health awareness session', 'COVID health awareness session')], max_length=10, null=True, verbose_name='Please indicate the types of meeting')),
                ('meeting_number', models.IntegerField(blank=True, null=True, verbose_name='Number of sessions attended')),
                ('meeting_modality', models.CharField(blank=True, choices=[('Online via WhatsApp', 'Online via WhatsApp'), ('Phone calls', 'Phone calls'), ('Offline (F2F)', 'Offline (F2F)')], max_length=200, null=True, verbose_name='Please the modality used per each session')),
                ('caregiver_attended', models.CharField(blank=True, choices=[('', '----------'), ('Mother', 'Mother'), ('Father', 'Father'), ('Other', 'Other')], max_length=100, null=True, verbose_name='Who attended the meetings')),
                ('caregiver_attended_other', models.TextField(blank=True, null=True, verbose_name='Please specify')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Follow Up Service',
                'verbose_name_plural': 'Follow Up Services',
            },
        ),
        migrations.CreateModel(
            name='HealthNutritionService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('baby_breastfed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Is the baby being Breastfed?')),
                ('infant_exclusively_breastfed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='if yes, is it exclusively breastfeeding for infants between 0-6 months?')),
                ('eat_solid_food', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the child start to eat solid food?')),
                ('age_eat_solid_food', models.TextField(blank=True, null=True, verbose_name='If yes, at which age ?')),
                ('child_vaccinated', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Is the child being vaccinated as per the National vaccination calendar?')),
                ('development_delays_identified', models.CharField(blank=True, choices=[('Mental', 'Mental'), ('Cognitive', 'Cognitive'), ('Neurological', 'Neurological'), ('No', 'No')], max_length=10, null=True, verbose_name='Any mental , cognitive or neurological development delays is being identified?')),
                ('eating_minimum_meals', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Is the child eating 3 minimum meals per day?')),
                ('positive_parenting', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='positive parenting and dealing with difficult children without the use of harsh punishment?')),
                ('respond_stressful_events', models.TextField(blank=True, null=True, verbose_name='How children of different ages respond to and understand stressful and traumatic events?')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Health & Nutrition Service',
                'verbose_name_plural': 'Health & Nutrition Services',
            },
        ),
        migrations.CreateModel(
            name='InclusionService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('dropout', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Dropout')),
                ('parental_engagement', models.CharField(blank=True, choices=[('Mother Only', 'Mother Only'), ('Father Only', 'Father Only'), ('Both', 'Both'), ('No one', 'No one'), ("Haven't started yet", "Haven't started yet")], max_length=100, null=True, verbose_name='Parental Engagement Curriculum')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Inclusion',
                'verbose_name_plural': 'Inclusions',
            },
        ),
        migrations.CreateModel(
            name='Packages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('type', models.CharField(blank=True, choices=[('Core-Package', 'Core Package'), ('Walk-in-OOSC', 'Walk-in OOSC'), ('Walk-in-In-School', 'Walk-in In School')], max_length=100, null=True, verbose_name='Type')),
                ('category', models.CharField(blank=True, choices=[('Education', 'Education'), ('Health & Nutrition', 'Health & Nutrition'), ('Child Protection', 'Child Protection'), ('Social Protection', 'Social Protection')], max_length=100, null=True, verbose_name='Type')),
                ('required', models.BooleanField(default=False)),
                ('age', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Package',
                'verbose_name_plural': 'Packages',
            },
        ),
        migrations.CreateModel(
            name='ProvidedServices',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=250)),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Type')),
                ('completed', models.BooleanField(default=False)),
                ('required', models.BooleanField(default=False)),
                ('completion_date', models.DateField(blank=True, null=True, verbose_name='Completion date')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Provided Service',
                'verbose_name_plural': 'Provided Services',
            },
        ),
        migrations.CreateModel(
            name='PSSService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('child_registered', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Is the child registered/ have birth registration?')),
                ('child_living_arrangement', models.CharField(blank=True, choices=[('Unaccompanied or Separated Child', 'Unaccompanied or Separated Child'), ('Living with single parent/caregiver', 'Living with single parent/caregiver'), ('Living with Mother/women-headed Household ', 'Living with Mother/women-headed Household'), ('Child-headed Household', 'Child-headed Household'), ('Main caregiver is ill/disabled', 'Main caregiver is ill/disabled')], max_length=250, null=True, verbose_name="What is the child's living arrangement?")),
                ('child_vulnerability', models.CharField(blank=True, choices=[('Clear signs of neglect', 'Clear signs of neglect'), ('Clear signs of distress', 'Clear signs of distress'), ('Clear signs of physical maltreatment/damage and/or injuries', 'Clear signs of physical maltreatment/damage and/or injuries')], max_length=250, null=True, verbose_name="What is the child's living arrangement?")),
                ('child_out_school_reasons', models.CharField(blank=True, choices=[('Fear of bullying, discrimination or violence at school or on the way to school', 'Fear of bullying, discrimination or violence at school or on the way to school'), ('The child needs to work', 'The child needs to work'), ('The child needs to stay at home to support the family with chores', 'The child needs to stay at home to support the family with chores'), ('Disability', 'Disability')], max_length=250, null=True, verbose_name='Reasons for a child being out of school')),
                ('caregivers_distress', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Do you feel distressed and anxious?')),
                ('caregivers_additional_parenting', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='If yes, would you like any additional parenting or psychosocial support?')),
                ('child_distress', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='Are any of the children in your HH experiencing any signs of distress or negative mental health symptoms ?')),
                ('child_additional_parenting', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=100, null=True, verbose_name='If yes, do you need additional support for taking care or better dealing with your children?')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'PSS Service',
                'verbose_name_plural': 'PSS Services',
            },
        ),
        migrations.CreateModel(
            name='Referral',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('referred_formal_education', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Was the child referred to formal education (Grade 1)?')),
                ('receive_needed_material', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the child receive all needed materials and resources (Stationery, Books, Learning bundle)?')),
                ('referred_service', models.CharField(blank=True, choices=[('', '----------'), ('No', 'No'), ('CP', 'CP'), ('Wash', 'Wash'), ('Health', 'Health'), ('Youth', 'Youth'), ('Other', 'Other')], max_length=100, null=True, verbose_name='Was the child referred to a service?')),
                ('referred_service_other', models.TextField(blank=True, null=True, verbose_name='Please specify')),
                ('recommended_learning_path', models.CharField(blank=True, choices=[('', '----------'), ('Transition to Dirasa', 'Transition to Dirasa'), ('Repeat same level in next  school year', 'Repeat same level in next  school year'), ('Progress to FE', 'Progress to FE'), ('Referred to Specialized Education', 'Referred to Specialized Education'), ('Referred to TVET', 'Referred to TVET'), ('Drop out', 'Drop out'), ('Referred to YBLN', 'Referred to YBLN')], max_length=10, null=True, verbose_name='Based on the overall score, what is the recommended learning path/outcome?')),
                ('referred_school', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='schools.School', verbose_name='Name of the School referred to')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Referral',
                'verbose_name_plural': 'Referrals',
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('have_labour', models.CharField(blank=True, choices=[('No', 'No'), ('Yes - Morning', 'Yes - Morning'), ('Yes - Afternoon', 'Yes - Afternoon'), ('Yes - All day', 'Yes - All day')], max_length=100, null=True, verbose_name='Does the child participate in work?')),
                ('labours', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('', '----------'), ('Agriculture', 'Agriculture'), ('Building', 'Building'), ('Manufacturing', 'Manufacturing'), ('Retail / Store', 'Retail / Store'), ('Begging', 'Begging'), ('Other services', 'Other services')], max_length=50, null=True), blank=True, null=True, size=None, verbose_name='What is the type of work ?')),
                ('labours_other_specify', models.CharField(blank=True, max_length=100, null=True, verbose_name='Please specify (hotel, restaurant, transport, personal services such as cleaning, hair care, cooking and childcare)')),
                ('labour_hours', models.IntegerField(blank=True, null=True, verbose_name='How many hours does this child work in a day?')),
                ('labour_weekly_income', models.CharField(blank=True, choices=[('', '----------'), ('10,000 LBP or less', '10,000 LBP or less'), ('11,000 to 25,000 LBP', '11,000 to 25,000 LBP'), ('26,000 to 50,000 LBP', '26,000 to 50,000 LBP'), ('More than 50,000 LBP', 'More than 50,000 LBP')], max_length=100, null=True, verbose_name='What is the income of the child per week?')),
                ('source_of_identification', models.CharField(blank=True, choices=[('', '----------'), ('Dirassa', 'Dirassa'), ('Awareness Session', 'Awareness Session'), ("Child's parents", "Child's parents"), ('From Hosted Community', 'From Hosted Community'), ('Sector Partners referral (CP, Education, Health, Wash, Youth, Palestenian program...) ', 'Sector Partners referral (CP, Education, Health, Wash, Youth, Palestenian program...) '), ('From Profiling Database', 'From Profiling Database'), ('From Other NGO', 'From Other NGO'), ('From Displaced Community', 'From Displaced Community'), ('Referred by the municipality/Other formal sources', 'Referred by the municipality/Other formal sources'), ('Other Sources', 'Other Sources')], max_length=100, null=True, verbose_name='Source of referral of the child to MSCC')),
                ('cash_support_programmes', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, choices=[('', '----------'), ('Haddi', 'Haddi'), ('Education Cash assistance', 'Education Cash assistance'), ('UNHCR cash assistance', 'UNHCR cash assistance'), ('WFP cash assistance', 'WFP cash assistance')], max_length=100, null=True), blank=True, null=True, size=None, verbose_name='Cash support programmes that child is already benefitting from')),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='Type')),
                ('deleted', models.BooleanField(default=False)),
                ('registration_date', models.DateField(blank=True, null=True, verbose_name='Registration date')),
                ('center', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='locations.Center', verbose_name='Center')),
                ('child', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='child.Child', verbose_name='Child')),
                ('child_outreach', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='outreach.OutreachChild', verbose_name='Outreach Child')),
                ('modified_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL, verbose_name='Modified by')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('partner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='schools.PartnerOrganization', verbose_name='Partner')),
            ],
            options={
                'ordering': ['-id'],
                'verbose_name': 'MSCC Registration',
                'verbose_name_plural': 'MSCC Registrations',
            },
        ),
        migrations.CreateModel(
            name='YouthKitService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('volunteering_experience', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Does the adolescent have any volunteering experience?')),
                ('previous_community_initiative', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Was the adolescent part of any previous community based initiative?')),
                ('enrollment_reason', models.CharField(blank=True, max_length=300, null=True, verbose_name='What is the reason for the adolescent enrollment in the programme?')),
                ('pre_tests_administered', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Were pre-tests administered to assess adolescents level?')),
                ('test_diagnostic_done', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent undertake any Post Diagnostic tests?')),
                ('receive_passing_grade', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent receive a passing grade for the tests?')),
                ('life_skills_completed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent complete the life skills package?')),
                ('participate_volunteering', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent participate in any volunteering opportunity during the course of the program?')),
                ('volunteering_specify', models.CharField(blank=True, choices=[('', '----------'), ('Outreach', 'Outreach'), ('Data entry', 'Data entry'), ('Admin work', 'Admin work'), ('Awareness raising sessions', 'Awareness raising sessions'), ('Empowerment and leadership', 'Empowerment and leadership'), ('Other', 'Other')], max_length=200, null=True, verbose_name='Please specify the volunteering opportunity')),
                ('social_course', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent benefit from any social innovation/entrepreneurship course?')),
                ('yfs_course_completed', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent complete the YFS course?')),
                ('training_material', models.CharField(blank=True, choices=[('', '----------'), ('Printed workbook', 'Printed workbook'), ('Tablets', 'Tablets'), ('Access to digital content (learning Passport) ', 'Access to digital content (learning Passport)'), ('Other', 'Other')], max_length=200, null=True, verbose_name='What training material was provided?')),
                ('future_path', models.CharField(blank=True, choices=[('', '----------'), ('Transition to FE', 'Transition to FE'), ('Repeat the school year', 'Repeat the school year'), ('Refer to a UNICEF Youth Programme (skills training, CBT, GIL)', 'Refer to a UNICEF Youth Programme (skills training, CBT, GIL)'), ('Transition to TVET', 'Transition to TVET'), ('Internship or volunteering opportunity', 'Internship or volunteering opportunity')], max_length=200, null=True, verbose_name='What is the recommended future path for the adolescent?')),
                ('participate_community_initiatives', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=10, null=True, verbose_name='Did the adolescent participate/come up in community based initiatives?')),
                ('community_initiatives_specify', models.TextField(blank=True, null=True, verbose_name='What is the initiative?')),
                ('adolescent_attendance', models.CharField(blank=True, choices=[('', '----------'), ('Full attendance', 'Full attendance'), ('Absence for less than 5 days', 'Absence for less than 5 days'), ('Absence for more than 5 days', 'Absence for more than 5 days'), ('Dropout', 'Dropout')], max_length=200, null=True, verbose_name='Adolescent attendance')),
                ('adolescent_dropout_reason', models.TextField(blank=True, null=True, verbose_name='Reason for dropout')),
                ('adolescent_dropout_date', models.DateField(blank=True, null=True, verbose_name='Dropout Date')),
                ('registration', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration')),
            ],
            options={
                'ordering': ['id'],
                'verbose_name': 'Youth Kit Service',
                'verbose_name_plural': 'Youth Kit Services',
            },
        ),
        migrations.AddField(
            model_name='referral',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='pssservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='providedservices',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='inclusionservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='healthnutritionservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='followupservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='educationservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='educationrsservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='educationrsservice',
            name='school',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='schools.School', verbose_name='Name of public School'),
        ),
        migrations.AddField(
            model_name='educationprogrammeassessment',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
        migrations.AddField(
            model_name='digitalservice',
            name='registration',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='mscc.Registration'),
        ),
    ]
